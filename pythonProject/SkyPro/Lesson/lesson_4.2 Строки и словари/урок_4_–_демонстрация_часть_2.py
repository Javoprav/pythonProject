# -*- coding: utf-8 -*-
"""Урок 4 – демонстрация часть 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F3DySsQrUcEj9i1JhHBjx1SQXv5U_mNE

## Эпизод 1. Привет, словари!

### У словаря есть ключ и значение

С помощью фигурных скобок, так мы создадим пустой словарь. Словарь сосотоит из ключа и значения. Можно провести аналогию со толковым словарем, у каждого слова в словаре есть определение. Или например с телефонной книгой. У нас есть имена людей и номер телефона, найдя нужное имя мы узнаем номер телефона. Подобное и в словарях python есть ключ и у каждого ключа есть значение. Чтобы работать со словарём, его нужно создать. Сделать это можно несколькими способами.

### Создать с помощью {}

Что бы создать пустой словарь запишем пустые фигурные скобки. Так же мы можем создать словарь с некоторыми значениями, для этого в фигурных скобках указываем ключ затем двое точие и значение данного ключа, элементы в словаре разделены запятой.
"""

d = {}

print(d)

d = {'Лена': 3659874562, 'Андрей': 56987456215}

print(d)

d = {'python': 'Язык программирования', 'Андрей': 'Имя человека'}

print(d)

"""### Создать с помощью функции dict

Еще один способ как создать словарь - это с помощью функции dict, в него передаем ключ (без кавычек) ставим знак присваивания (равно) и пишем значение, элементы разделяем запятой.
"""

d = dict(Лена=3659874562, Андрей=56987456215)

print(d)

"""### По ключу мы можем получить значение ключа

Что бы получить информацию из словаря мы должны обратиться к ключу. Для этого пишем имя словаря, ставим квадратные скобки и в квадратных скобках пишем ключ, и нам вернеться значение этого ключа
"""

d = {'Лена': 3659874562, 'Андрей': 56987456215}

print(d['Лена'])

d = {'Лена': 3659874562, 'Андрей': 56987456215}

print(d['Андрей'])

d = {'python': 'Язык программирования', 'Андрей': 'Имя человека'}

print(d['python'])

"""### Ключом могут быть...

Ключем в словаре могут быть любые не изменяемые типы данных, например: строки, числа, булевый тип и т.д.
"""

d = {'Лена': 3659874562, 59: 'Это число', 3.14: 'Число Pi', True: 1}

print(d)
print(d[True])

explanations = {True: "Да, все норм", False: "Не, так не пойдет"}

print(explanations[1>2])

# if 3>2:
#   print(explanations[True])
# else:
#   print(explanations[False])

"""### Значениями могут быть любой тип данных

Значением ключа в словаре может быть любой тип данных. Строки, числа, булево значение, списки и .д.
"""

d = {'Число': 22, 'Строка': 'Какойто текст', 'Это список': [1, 2, 3]}

print(d)

"""### Словарь – это изменяемый тип данных

Словарь в Python упорядоченная коллекция произвольных объектов с доступом по ключу. Их иногда ещё называют ассоциативными массивами или хеш-таблицами.
"""

dictionary = {"cat": "Котейка"}
dictionary["dog"] = "Собака"

print(dictionary)

dictionary["cat"] = "Кошка"

print(dictionary)

del dictionary["cat"]

print(dictionary)

"""### Задачка эпизода 1

В программе задан словарь. Пользователь вводит слово. Если оно есть - выводится перевод.
Введите слово:
> cat
Перевод: Котейка
"""

dictionary = {
  "cat": "Кошка",
  "dog": "Собака",
  "owl": "Сова",
}

word = input("Введите слово ")

if word in dictionary:
  print(f"Перевод: {dictionary[word]}")

"""## Эпизод 2. Операции со словарями

### Можно менять и добавлять значения

Мы можем менять значения ключа в словаре. Для этого пишем имя словаря, ставим квадратные скобки, указываем ключь и после знака равно пишем то значение которое хотим присвоить этому ключу. Если ключ такой есть, то его значение перезапишеться, если ключ отсутствует, то он будет создать и ему будет присовено это значение
"""

d = {'John': 'john33@gamil.com', 'Bobi': 'bob_1997@mail.ru'}
print(d)

d['John'] = 'new_john@gamil.com'
print(d)

d = {'John': 'john33@gamil.com', 'Bobi': 'bob_1997@mail.ru'}
print(d)

d['Lena'] = 'elena@mail.com'
print(d)

"""### Можно удалять значения

Что бы удалить ключ\значение из словаря. можно воспользоваться оператором del. Пишем del затем имя словаря м ключем в фигурных скобках
"""

d = {'John': 'john33@gamil.com', 'Bobi': 'bob_1997@mail.ru'}
print(d)

# d['Bobi'] = None

del d['Bobi']
print(d)

d = {'John': 'john33@gamil.com', 'Bobi': 'bob_1997@mail.ru'}
print(d)

del d['John']
print(d)

"""### Задачка эпизод 2

В магазине взвешивают фрукты. Давайте напишем программу, чтобы называть фрукт и получать его стоимость

> Программа: Выберите фрукт 

> Пользователь:яблоки

> Программа: Вес в граммах

> Пользователь:500

> Программа:  Цена: 75 денег
"""

store = {
  "яблоки": 100,
  "груши": 200,
  "ананасы": 300,
}

fruit = input("Выберите фрукт ")

price = store[fruit]

weight = int(input("Вес в граммах"))

total = price * weight / 1000

print(f"Цена: {total} денег")

"""## Эпизод 3. Методы словарей

### При итерации по словарю мы получаем ключи

Можно перебрать словарь с помощью цикла for. При каждой итерации цикла мы получаем ключ из словаря. Давайте переберем словарь циклом и выведем ключ значение
"""

d = {'John': 'john33@gamil.com', 'Bobi': 'bob_1997@mail.ru'}

for k in d:
  print("Это ключ", k)
  print("Это значение", d[k])

"""### У словарей есть полезные методы

### метод items

Что бы при переборе словаря циклом for получить сразу ключ и значение, нужно воспользоваться методом items. Посмотрим например.
"""

d = {'John': 'john33@gamil.com', 'Bobi': 'bob_1997@mail.ru'}

# print(d.items())

for k, v in d.items():
  print(f"Ключ: {k}, значение: {v}")

"""### метод keys

Что бы получить все ключи в словаре нужно использовать метод keys.
"""

d = {'John': 'john33@gamil.com', 'Bobi': 'bob_1997@mail.ru'}

# print(d.keys())

for item in d.keys():
  print(item)

"""### метод values

А вот что бы получить все значения нам нужно воспользоваться мотодом vаlues. На пример
"""

d = {'John': 'john33@gamil.com', 'Bobi': 'bob_1997@mail.ru'}

# print(d.values())

for item in d.values():
  print(item)

"""### Задачка эпизод 3

Например, вы отправились в ресторан и решили поделить счет. Выведем список гостей и итоговую сумму за счет

> Гости: Алексей, Василиса, Олег, Даша

> Сумма: 2560
"""

guests = {
  "Алексей": 500,
  "Василиса": 1200,
  "Олег": 950,
  "Даша": 8000,
}

guests_names = ', '.join(guests.keys())

print(f"Гости: {guests_names}")

total = 0

for sum in guests.values():
  total += sum

print(f"Сумма: {total}")

"""## Селфчек"""

# Как создать словарь с числами, строками, булевыми переменными? 
dict_of_numbers = {"one":1, "two":2, "three":3}
dict_of_numbers = {1:"one", 2:"two", 3:"three"}


dict_of_bools = {True: "Правда", False: "Неправда" }

# Как получить элемент словаря?
stats = {"correct":1, "incorrect":3, "total":3}

stats["correct"]

# Как поменять элемент словаре?
stats = {"correct":1, "incorrect":3, "total":3}

stats["correct"] = 2

print(stats)

# Как удалить элемент в словаре?
stats = {"correct":1, "incorrect":3, "total":3}

del stats["correct"] 

print(stats)

# Как вывести все из словаря в формате “ключ – значение”?
stats = {"correct":1, "incorrect":3, "total":3}

for key, item in stats.items():
  print(key,item)

# Как вывести все ключи? Все значения?
stats = {"correct":1, "incorrect":3, "total":3}

print(stats.keys())
print(stats.values())