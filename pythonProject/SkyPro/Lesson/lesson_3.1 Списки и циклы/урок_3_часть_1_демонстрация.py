# -*- coding: utf-8 -*-
"""Урок 3 часть 1 - Демонстрация.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jsF5sZgiOOk8JdHjT9EOMj8an-Ty_CcS

## Эпизод 1

### Списки в Python

Список покупок перечисляется через запятую. В питоне тоже перечисляем через запятую то, что мы хотим положить в список. Наша группа объектов или значений может состоять из объектов любого типа. Мы просто перечисляем их и все это хранится в одной переменной
"""

["deer", "bear", "rabbit", "butterfly"]

[5162, 1337, 2345, 9999]

"""Списки можно также сохранять в переменную. Наша группа объектов или значений может состоять из объектов любого типа. Мы просто перечисляем их и все это хранится в одной переменной.

"""

animals = ["deer", "bear", "rabbit", "butterfly"]
print(animals)

stolen_pin_codes = [5162, 1337, 2345, 9999, "test"]
print(stolen_pin_codes)

"""Аналогично тому, как мы можем с помощью функции print вывести число или строку, мы точно так же можем вывести список с его содержимым


"""

animals = ["deer", "bear", "rabbit", "butterfly"]
print(animals)

"""Потому что список – это отдельный тип данных"""

type([5162, 1337, 2345, 9999])

"""### Нумерация списков


"""

# ['P', 'y', 't', 'h', 'o', 'n']

#   0    1    2    3    4    5

"""Исторически нумерация элементов списка начинается с нуля.
Чтобы запомнить это - достаточно представить, что речь идет о количестве шагов,
которые надо пройти от начала, чтобы увидеть объект

### Достаем элемент списка по его порядковому номеру

Идея списка в том, что мы можем достать любой элемент по его порядковому номеру.

Это похоже на поиск конкретного тома в собрании сочинений в библиотеке
"""

hp_books = ["Философский Камень", "Тайная Комната", "Узник Азкабана"]
print(hp_books[2])

"""### Задача эпизода 1

Написать программу, которая выводит прогноз погоды из списка:


"""

weather = [4,5,5,3,5,7,5,7,4,8,5,8,6,5,9,6,4,5,5,7,8,11,6,7,11,9,7,8,6,7,8]

date = int(input("Введите день: "))

print(weather[date - 1])

"""## Эпизод 2

У созданного списка можно получить длину, испольуя функцию len. 

Она похожа на print() или int(), но передается ей список, а на выходе - число
"""

len([3,4,5])

len(["декабрь", "январь", "февраль"])

"""Новые данные в список можно добавить методом append. """

brhd_ring = ["Арагорн", "Фродо", "Гэндальф", "Гимли"]
brhd_ring.append("Леголас")

print(brhd_ring)

digits = [1, 2, 3]
digits.append(4)

print(digits)

"""А что за методы? Методы – ближайшие родственники функций, но существуют не сами по себе, а прицеплены к переменной. Им тоже передается значение и они тоже могут что нибудь вернуть. У каждого типа есть свой набор методов. Например, у типа int метода append нет, а у list – есть. Мы познакомимся с методами ближе, когда дойдем до классов и объектов в Python.

### Задачка эпизода 2

Написать программу, которая, в зависимости от пользовательского ввода дополняет исходный список. Вначале в списке всегда яблоки и молоко, но если мы идем на пикник – там будут шашлык и дрова, если в гости - торт и вино, а если никуда – мороженку и попкорн

Например:

`Введите, куда собираетесь вечером: на пикник, в гости, никуда.`

Пользователь вводит: `никуда`

`Ваш список покупок: 4 товара [“яблоки”, “молоко”, “мороженка”, ”попкорн”]`
"""

shopping_list = ["яблоки", "молоко"]

destination = input("Куда пойдем? ")

if destination == "пикник":
  # shopping_list.append("шашлык")
  # shopping_list.append("дрова")
  shopping_list.extend(["шашлык", "дрова"])
elif destination == "в гости":
  shopping_list.append("вино")
  shopping_list.append("торт")
elif destination == "никуда":
  shopping_list.append("мороженое")
  shopping_list.append("попкорн")
else:
  print("Не знаю такого места")

print(f"Ваш список покупок: {len(shopping_list)} товара, {shopping_list}")

"""## Эпизод 3

### Индекс и срезы

### Достаем из списка и кладем в список
"""

ladies = ['Маша', 'Таня', 'Оля']
tanya = ladies[1]

print(tanya)

flock = ['sheep', 'sheep', 'sheep', 'sheep']
flock[2] = 'wolf'

print(flock)

"""### Можно использовать переменную в качестве индекса

"""

kings = ['Генрих', 'Людовик', 'Фридрих', 'Ричард']
pos = 2

print(kings[pos])

"""### Срезы - “под-списки” внутри списка

"""

drinks = ['пиво', 'чай', 'кофе', 'водка'] 

print(drinks[1:3])

drinks = ['пиво', 'чай', 'кофе', 'водка'] 

print(drinks[0:1])
print(drinks[0])

"""### Задача эпизода 3

Вам предоставлен список с англоязычными и русскоязычными терминами. 

Разделите их по двум разным спискам.
"""

terms = ["MVP","Маржинальность","Гипотеза","Деплой","ROI","IDE","Python"]

terms_en = terms[0:1] + terms[4:]
# terms_en = [terms[0]] + terms[4:]
terms_ru = terms[1:4]

print(terms)
print(terms_en)
print(terms_ru)

"""## Селфчек"""

# Как создать список?

things = [1,2,3]

# Как добавить 

things = [1,2,3]

things.append(4)

print(things)

# Как получить / изменить элемент

terms = ["MVP","Маржинальность","Гипотеза","Деплой","ROI","IDE","Python"]

print(terms[3])
terms[3] = "New"

# Какие получить длину списка?

terms = ["MVP","Маржинальность","Гипотеза","Деплой","ROI","IDE","Python"]

len(terms)

# Какие получить подсписок?

terms = ["MVP","Маржинальность","Гипотеза","Деплой","ROI","IDE","Python"]

print(terms[5:])