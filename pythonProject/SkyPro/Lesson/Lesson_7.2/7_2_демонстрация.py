# -*- coding: utf-8 -*-
"""7.2 Демонстрация

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pw6MTweZjUht6Ms66nVFi_ql2iuCxuPa

## Эпизод 1 – вложенные словари

Не всегда удобно хранить данные в обычных списках, в словарях прикольней. 

Сравните:
"""

store = [
    {"name":"Яблоки", "price":"100", "available": 40},
    {"name":"Апельсины", "price":"200", "available": 20},
    {"name":"Гранаты", "price":"400", "available": 5},
]

print(store[0]["name"])
print(store[1]["available"])

"""Сравните насколько удобнее обращаться:"""

store = {
    "apples": {"name":"Яблоки", "price":"100", "available": 40},
    "oranges": {"name":"Апельсины", "price":"200", "available": 20},
    "pomegranate": {"name":"Гранаты", "price":"400", "available": 5},
}

print(store["apples"]["name"])
print(store["oranges"]["available"])

"""Напомним, не только строки могут быть ключом, например"""

meters = {1: "метр", 0.1: "дециметр", 0.01: "сантиметр", 0.001: "миллиметр"}

meters[0.01]

"""Структура словарей может быть и не повторяющейся"""

lesson = {
    "topic": "Вложенные списк и множества",
    "course": {"title": "Питон для веб разработки", "id": "008"},
    "students": ["Сергей", "Юлий", "Роман", "Ольга", "Валера", "Юлия"],
    "speaker": {"name": "", "surname": "", "professions": ["developer", "instructional designer"]},
}

print(lesson["speaker"]["professions"][0])

"""А если нам нужно все же запустить цикл по спискам, а у нас словари - к нашим услугам уже знакомые нам  keys(), values(), items()

Например, мы хотим получить все ключи:
"""

store = {
    "apples": {"name":"Яблоки", "price":"100", "available": 40},
    "oranges": {"name":"Апельсины", "price":"200", "available": 20},
    "pomegranate": {"name":"Гранаты", "price":"400", "available": 5},
}

print(list(store.keys()))

"""Или, если мы хотим превратить словарь словарей обратно в список словарей – нет ничего проще!"""

store = {
    "apples": {"name":"Яблоки", "price":"100", "available": 40},
    "oranges": {"name":"Апельсины", "price":"200", "available": 20},
    "pomegranate": {"name":"Гранаты", "price":"400", "available": 5},
}


store_list = list(store.values())

print(store_list)
print(type(store_list))

for fruit in store_list:
  print(fruit['name'], fruit['price'])

"""Если же вдруг нам понадобится и ключи и значения – вы знаете, что делать!"""

store = {
    "apples": {"name":"Яблоки", "price":"100", "available": 40},
    "oranges": {"name":"Апельсины", "price":"200", "available": 20},
    "pomegranate": {"name":"Гранаты", "price":"400", "available": 5},
}

for key, fruit in store.items():
    print(key, fruit['name'], fruit['price'])

"""### Задачка эпизода 1

Провести инвентаризацию и пересчитать, сколько какого товара лежит на складе.

Записать в формате:

```
{"apples": 40, "oranges": 20, "pomegranate": 5}
```
"""

store = {
    "apples": {"name":"Яблоки", "price":"100", "available": 40},
    "oranges": {"name":"Апельсины", "price":"200", "available": 20},
    "pomegranate": {"name":"Гранаты", "price":"400", "available": 5},
}

stocktaking = {}
for key, vaule in store.items():
    stocktaking[key] = vaule["available"]

print(stocktaking)

"""## Эпизод 2 – перекладывание словарей

Иногда нам нужно бывает переложить одну структуру данных в другую. 

Поменять ключи или разделить словари. Особенно это верно, когда мы работаем с готовыми данными, которые где-то взяли.

Ведь все придумывают свои системы хранения данных и жестких стандартов нет
"""

user_info_1 = {"name": "Алексей", "surname": "Альшевский", "age": 35}
# ->
user_info_2 = {"i": "Алексей", "f": "Альшевский", "yo": 35}

"""Но это не страшно, можно просто превести одни данные в другие"""

user_info_1 = {"name": "Алексей", "surname": "Альшевский", "age": 35}

user_info_2 = {
    "i": user_info_1['name'],
    "f": user_info_1["surname"],
     "yo": user_info_1["age"]
    }

print(user_info_2)

"""Если такая структура хранится в списке – будем использовать цикл for:"""

user_infos_raw = [
    {"name": "Анна", "surname": "Миронова", "age": 23},              
    {"name": "Алексей", "surname": "Альшевский", "age": 35},
    {"name": "Василий", "surname": "Кузьмин", "age": 27},
]

user_infos = []
for user_raw in user_infos_raw:
    user = {
        "i": user_raw["name"],
        "f": user_raw["surname"],
        "yo": user_raw["age"]
    }
           
    user_infos.append(user)

print(user_infos)

"""### Задачка эпизода 2

Еще один пример посложнее– скиллсет разработчика. Разработчик может знать несколько языков, но иногда нам нужно сократить количество информайии которое хранится в словаре.

В задаче нам нужно превратить словарь языков в список, оставив только те языки которые студент знает как middle / senior. Финальный словарь должен выглядеть примерно так:

```
{"name": "Алексей", "languages": {"java": "beginner", "php": "middle", "python": "senior", "go": "none"}}
```

```
{"name": "Алексей", "languages": ["php", "python"]}
```
"""

coder_info = {
    "name": "Алексей", 
    "languages": {
        "java": "beginner", 
        "php": "middle", 
        "python": "senior", 
        "go": "none",
    }
}


languages = []
for lang, level in coder_info['languages'].items():
  if level in ('middle', 'senior'):
    languages.append(lang)

coder_info_short = {"name": coder_info['name'], "languages": languages}

print(coder_info_short)

"""## Эпизод 3 - форматы данных и JSON

Чем дальше, тем больше мы работаем с крупными структурами данных и большой вложенностью. Мы знаем, что можно хранить значения через пробелы, через запятую и перенос строки. Но такие разделители становятся проблемой, когда в нашем контенте встречаются, такие же пробелы или запятые. Или двоеточия
"""

# codes.txt

23, 17, 3,5, 21, 552

         ↑

# messages.txt

Алиса: хей
Борис: ага
Алиса: го на криптоивент?
Борис: конечно :)
               ↑

"""Нужен такой формат данных, который мог бы хранить
- числа
- строки
- списки любой сложенности
- словари любой вложенности

На самом деле такой формат есть и JSON и он очень похож на словари в Питоне
"""

{
    "fruit": "Apple",
    "size": "Large",
    "color": "Red"
}

"""Однако, если присмотреться, можно найти различия."""

{
  "clients": [
    {
      "id": "59761c23b30d971669fb42ff",
      "isActive": true,
      "age": 36,
      "name": "Dunlap Hubbard",
      "gender": "male",
      "company": "CEDWARD",
      "email": "dunlaphubbard@cedward.com",
      "phone": "+1 (890) 543-2508",
      "address": "169 Rutledge Street, Konterra, Northern Mariana Islands, 8551"
    },
    {
      "id": "59761c233d8d0f92a6b0570d",
      "isActive": true,
      "age": 24,
      "name": "Kirsten Sellers",
      "gender": "female",
      "company": null,
      "email": "kirstensellers@emergent.com",
      "phone": "+1 (831) 564-2190",
      "address": "886 Gallatin Place, Fannett, Arkansas, 4656"
    }
}

"""А вот и отличия:

- ключом может быть только строка
– всегда используются двойные кавычки
- true пишется с маленькой буквы
- после последнего элемента не ставится запятая
- нельзя использовать кортежи и множества – только списки и словари
- пустое значение не None а null

Чтобы прочувствовать, попробуем создать типичный словарь на Питоне и проверить его JSON-линтером.
"""

{   
    "name": "Алиса",
    "is_online": True,
    "hobbies" : {
        1: "cryptography",
        2: "coding",    
        3: "outdoor activities",        
    },
 }

"""Открвываем [jsonformatter.curiousconcept.com](https://jsonformatter.curiousconcept.com) и копируем туда текст.

---

Мы не только увидели разницу, но и превратили один тип в другой. Однако, если это смог сделать какой-то сайт, это сможет сделать и пайтон. И действительно, есть пакет json, который это делает. Словари в Python могут быть превращены в json-строку методом json.dumps(). Вот так:
"""

import json

profile = {
    "name": "Alice",
    "is_online": True,
    "hobbies" : {
        1: "cryptography",
        2: "coding",    
        3: "outdoor activities",        
    },
 }

raw_json = json.dumps(profile)
print(raw_json)

with open('data.txt', 'w') as f:
  f.write(raw_json)

"""А теперь обратно:

В Python объекты JSON могут быть загружены напрямую как словари Python с помощью метода json.loads() из модуля json. После загрузки JSON в качестве словаря операции над объектом идентичны операциям с обычным объектом словаря.
"""

import json

with open('data.txt') as f:
  raw_json = f.read()

profile = json.loads(raw_json)
print(profile["name"])
print(profile["is_online"])
print(profile["hobbies"]["1"]) # а в исходном словаре ключи были int

"""## Эпизод 4 – Запросы к внешнему серверу

Подключим библиотеку и выполним первый запрос к первому на свете сайту:
"""

import requests

response = requests.get('http://info.cern.ch/hypertext/WWW/TheProject.html')
#response = requests.get('http://sky.pro')

print(response.text)

"""Отлично! Мы выполнили запрос и записали результат выполнения requests.get в переменную с именем response, после этого вывели response.text – содержимое ответа в текстовом формате.

Первое, что мы можем получить из Response – код состояния (status_code).
Код состояния информирует вас о статусе запроса.

Например, статус 200 OK означает, что ваш запрос был успешным, а статус 404 NOT FOUND означает, что искомый ресурс не найден. Есть много других возможных кодов состояния и вы изучите их во время знакомства с основами HTTP.

Обратимся к  .status_code, чтоб узнать, как дела у запроса!
"""

import requests

response = requests.get('http://sky.pro')

print(response.status_code)  # 200

"""Теперь обратимся к заведомо несуществующей странице:"""

import requests

response = requests.get('https://www.sky.pro/unicorns/')

print(response.status_code)  # 404

"""Хотя, выполняя запрос с помощью requests, мы получаем ответ в текстовом формате, мы легко можем перевести его в словарь или список, вызвав метод json объекта response. Воспользуемся сервисом ip2country – он предлагает API для определения страны по IP адресу!"""

import requests
import json
response = requests.get('https://api.ip2country.info/ip?55.53.53.5')

data = json.loads(response.text)
print(data['countryName'])

"""Мы можем использовать response.json() , чтобы получить обычный Python-словарь:"""

import requests

response = requests.get('https://api.thecatapi.com/v1/images/search')

response_json = response.json()

print(response_json[0]['url'])

"""Отлично, теперь давайте попробуем какое-то другое API!

Познакомимся со  списком открытых API:

https://github.com/public-apis/public-apis

### Задание эпизода 4

Получите с сайта https://catfact.ninja/fact данные и выведите 3 случайных факта о кошках. Например:

Вывод:
```
The smallest wildcat today is the Black-footed cat. The females are less than 20 inches (50 cm) long and can weigh as little as 2.5 lbs (1.2 kg).
Cats that live together sometimes rub each others heads to show that they have no intention of fighting. Young cats do this more often, especially when they are excited.
Some cats have survived falls of over 65 feet (20 meters), due largely to their crighting reflex.\u201d The eyes and balance organs in the inner ear tell it where it is in space so the cat can land on its feet. Even cats without a tail have this ability.

```
"""

import requests

for i in range(3):
  response = requests.get('https://catfact.ninja/fact')
  data = response.json()
  print(data['fact'])

"""### Дополнительно"""

import requests
#https://www.npoint.io/docs/efaeac58515a197efdfc
response = requests.get('https://api.npoint.io/efaeac58515a197efdfc')
response_json = response.json()
participants = response_json['participants']

for participant in participants:
  print(participant)

"""## Селфчек"""

# Как перечислить словари в словаре? (например, товары с ключом "артикул")
books = {
    '5446115891': {'title': 'Python. Лучшие практики и инструменты', 'author': 'Яворски М.', 'year': 2021, 'pages':560},
    '5446113866': {'title': 'Программируем на Python', 'author': 'Доусон М.', 'year': 2021, 'pages':416},
    '5446116843': {'title': 'Секреты Python Pro', 'author': 'Хиллард Д.', 'year': 2021, 'pages':320},
    '5446116843': {'title': 'Автостопом по Python', 'author': 'Рейтц К.', 'year': 2017, 'pages':336}
}

print(books['5446115891']['title'])
print(books['5446115891']['year'])

# Как создать многуровневый словарь? (например, для описания профиля?)
user = {
    'name': {'first': 'Иван', 'middle': 'Васильевич', 'last': 'Чапаев'}, 
    'skills': [
      {'name': 'Фехтовальщик', 'level': 'expert'},
      {'name': 'Наездник', 'level': 'master'},
      {'name': 'Пловец', 'level': 'beginner'},
    ]
}
user

# Как поменять формат словаря? (например, переложив его содержимое по другим ключам)

user1 = {
    'fio': f"{user['name']['last']} {user['name']['first']} {user['name']['middle']}",
    user['skills'][0]['name']: user['skills'][0]['level'],
    user['skills'][1]['name']: user['skills'][1]['level'],
    user['skills'][2]['name']: user['skills'][2]['level'],
}
user1

# Как переложить список в JSON?
import json
data = [0, 'zero', False, None]
json.dumps(data)

#  Как переложить словарь в JSON? 
import json
data = {'zero': 0, 'null': False}
json.dumps(data)

# Как получить JSON из строки и распаковать?
import json
string = '[0, "zero", false, null]'
data = json.loads(string)
for i in data:
  print (i)

# Как подключить requests и получить код сайта?
import requests
resp = requests.get('https://ya.ru/white')
print(resp.status_code)
print(resp.text)

# Как получить JSON с удаленного сайта?
# http://forismatic.com/en/api/

import requests
resp = requests.get('https://api.forismatic.com/api/1.0/', params={'method': 'getQuote', 'format': 'json'})
print(resp.status_code)
print(resp.text)
data = resp.json()
print(data['quoteText'])

# Какие бывают статус коды и что они означают?

# 2xx: Success (успешно):
# 200 OK («хорошо»)
# 204 No Content («нет содержимого»)

# 4xx: Client Error (ошибка клиента):
# 403 Forbidden («запрещено (не уполномочен)»)
# 404 Not Found («не найдено»)

# 5xx: Server Error (ошибка сервера):
# 500 Internal Server Error («внутренняя ошибка сервера»)
# 503 Service Unavailable («сервис недоступен»)
# 504 Gateway Timeout («шлюз не отвечает»)