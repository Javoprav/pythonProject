# -*- coding: utf-8 -*-
"""Урок 4 – демонстрация часть 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AxpCopWx5X7gymyg6psg0_9l5DGVPsXi

## Эпизод 1

Мы уже знакомы со строками, это простой тип данных. И все же про них можно много рассказывать. Строки похожи на списки, с ними можно использовать слайсы, индексы и циклы, а еще искать и заменять вхождения, разделять на подстроки и про все это посмотрим.

### Буквы можно получать индексами
"""

s = "Полиморфизм"

print(s[9])
print(s[2])
print(s[1])

s = "Алиса, привет"
# s = "Улисса, привет"

if s[0] == "А":
  print("Первая буква – а")

"""### Можно получать срезы из строк

Срез s[x:y] позволяет получить подстроку с символа x до символа y. Можно не указывать любое из значений, чтобы двигаться с начала или до конца строки. Отрицательные значения используются для отсчёта с конца (-1 — последний символ, -2 — предпоследний и т.п.)
"""

s = "Привет Алиса"
print(s[0:5])

s = "Полиморфизм – зло!"
print(s[-6:])

s = "Полиморфизм – зло!"
print(s[1:2])

"""### Можно посчитать символы в строке через len

Помните что строка состоит из последовательности символов. Узнать количество символов (длину строки) можно при помощи функции len. Посчитаем длину никнейма пользователя.
"""

print(len("Мама, я графоман, спасити!"))

text = "Мама, я графоман"

if len(text) == 16:
  print("В тексте 16 букв")

if len(text) > 9:
  print("Довольно много букв!")

"""### Строки можно перебрать циклом for

Строка это итерируемый объект состоит из последовательности символов. Строку можно перебрать циклом for. Строка перебираться будет посимвольно
"""



my_str = "Алиса идет гулять"  # ["А", "л" ... ]

for i in my_str:
  print(i)

"""### Задачка эпизода 1

Дана строка. Посчитать количество символов и количество слов. Количество слов - это количество пробелов + 1
"""

string = "Мама, я графоман, спасити!"

letters_count = 0
words_count = 0
spaces_count = 0

for letter in string:
  if letter not in [" ", ",", "!"]:
    letters_count += 1
  elif letter == " ":
    spaces_count += 1

if spaces_count == 0:
  if letters_count > 0:
    words_count = 1
else:
  words_count = spaces_count + 1

print(f"Букв: {letters_count}")
print(f"Количество слов: {words_count}")

"""## Эпизод 2

### Можно найти количество вхождений методом count

Метод count находит в  строке (к которой применяется метод)  подстроку (которая передается в качестве параметра). Функция возвращает количество вхождений. Иначе возвращает ноль.
"""

email = 'support@mail.ru'
print(email.count('@'))

email = 'support at skyend.ru'
print(email.count('@'))

email = 'Аааа, прекрати пожалуйста'
print(email.count('прекрати'))

email = 'Слов примерно столько, сколько пробелов – но это не точно. Посчитайте – узнаете'
print(email.count(' '))

"""### При поиске полезно менять регистр

Регистр – это большие и маленькие буквы, термин пришел из печатных машинок. Если "соня" и "Соня" – разные слова, поиск считается регистрозависимым. Иначе - регистронезависимым. По английски case-sensitive
"""

print("У меня есть Большие Буквы".lower())
print("У меня есть Большие Буквы".upper())

"У меня есть Большие Буквы".lower().count("буквы")

"""### Можно заменить кусочки строки с помощью метода replace

Метод replace заменяет все вхождения одной строки на другую. Формат: S.replace(old, new) — заменить в строке S все вхождения подстроки old на подстроку new. Пример заменим все пробелы в имени на нижнее подчеркивание или убрать пробелы в логине.
"""

email = 'my new mail@gmail.com'
new_email = email.replace(' ', '_')

print(email, new_email)

user_name = ' Super Star '
new_user_name = user_name.replace(' ', '')

print(new_user_name)

my_str = "Кукушка кукушонку купила джинсы. Надел кукушонок джинсы, Как в капюшоне он смешон!"
my_str = my_str.replace('джинсы', 'капюшон')

print(my_str)

"""### Задачка эпизода 2

Внутри Скайэнга распространены сокращения, которые непонятные внешнему человеку. Давйте напишем переводчик/расшифровщик со скайэнгвского на человеческий!
"""

original_text = """
Как все работает?
У подает заявку на ВУ на сайте. С ним связывается менеджер и записывает на ВУ. 
ВУ проводит не П, а специальный человек – МВУ.
В детских продуктах, когда проводится ВУ, на нем присутствует РУ
Когда ВУ успешно состоялся, У оплачивает уроки. 
"""

# ВУ - вводный урок
# КЦ - колл-центр
# ПМ - персональный менеджер
# МВУ - методист вводного урока 
# У - ученик  
# РУ - родитель ученика 
# П - преподаватель

edited_text = original_text.replace("МВУ", "методист вводного урока")
edited_text = edited_text.replace("ВУ", "вводный урок")
edited_text = edited_text.replace("КЦ", "колл-центр")
edited_text = edited_text.replace("ПМ", "персональный менеджер")
edited_text = edited_text.replace("РУ", "родитель ученика")
edited_text = edited_text.replace("У", "ученик")
edited_text = edited_text.replace("П", "преподаватель")

print(edited_text)

"""## Эпизод 3

### Строки можно разделить на кусочки split

Получить часть строки можно с помощью метода split. Например мы можем разбить строку по собачке, запятой, точке или пробелу. Например email или файл с раширением
"""

s = "Альфа, Браво, Чарли"
s = s.split(", ")

print(s)
type(s)

s = "john_man@gmail.com"
s = s.split("@")

print(s)
print(s[1])

s = "docs.google.com"
s = s.split(".")

print(s)
print(s[2])

"""### Можно склеивать строки (обратно) - метод join

join() очень удобный метод, позволяющий склеить N количество строк, причём с произвольным разделителем. Метод join() принимающий в качестве аргумента список и возвращает новую строку.
"""

color = ['red', 'green', 'blue']

print(' '.join(color))
print('/'.join(color))
print('.'.join(color))
print(' или '.join(color))

color = ['red', 'green', 'blue']

print(', '.join(color))

color = ['red', 'green', 'blue']

print('***'.join(color))

"""### Задачка эпизода 3

На вход подается строка, которая может содержать меншны и хештеги.

Если в строке встречается слово, которое начинается с @ или # добавить в конце:

Упомянуты люди:
`@lord.destroyer`
`@ase4ka`
`@mifffutka`

Упомянуты теги:
`#питон` `#кодить`
"""

message = """
Всем привет, кто пришел изучать #питон и добро пожаловать в чат! 
Будем тут общаться, учиться, делать приложения вместе с @happysnake, @angrycoder @mewton
""" 

people_mentioned = []
tags_mentioned = []

text = message.replace(",", "")
words = text.split(" ")

for word in words:
  if word.startswith("@"):
    people_mentioned.append(word)
  elif word.startswith("#"):
    tags_mentioned.append(word)

people_mentioned_joined = " ".join(people_mentioned)
tags_mentioned_joined = " ".join(tags_mentioned)

print(f"Упомянуты люди: {people_mentioned_joined}")
print(f"Упомянуты теги: {tags_mentioned_joined}")

"""### Строки неизменяемый тип данных зато итерируемый

Первое, что будет круто усвоить, что строки — это неизменяемые объекты. Каждый раз, когда мы говорим про «изменение» строки, технически мы создаем новый объект и записываем туда вычисленное значение. При работе над строкой всегда возвращается новая стока. Это очень непохоже на другие типы данных!
"""

example = "Тестовая строка"

# example[0] = "У"

# del example[0]

# example.replace("е","у")

text = example.replace("е","у")

print(example)
print(text)

"""## Селфчек"""

# Как получить первую букву, как заменить букву?
s = "Алиса, вылезай из норы!"

s[0]

# Как перебрать строку по одной букве?
s = "Алиса, вылезай из норы!"

for letter in s:
  print(letter)

# Как проверить каждую букву, посчитать количество букв?
s = "Алиса, вылезай из норы!"

letter_count = 0

for letter in s:
  if letter not in [" ",",","!"]:
    letter_count += 1

print(letter_count)

# Как проверить вхождение подстроки в строку?
s = "Алиса, вылезай из норы!"

if s.count("вылезай") > 0:
  print("Слово входит")

# Как заменить подстроку в строке?
s = "Алиса, вылезай из норы!"

s = s.replace("Алиса","Дениса")

# Как поделить строку
s = "Алиса, вылезай из норы!"
 
s.split(",")

# Как соединить строку
persons = ["Алиса", "Шляпник", "Мышь Соня"]

print(", а еще ".join(persons))